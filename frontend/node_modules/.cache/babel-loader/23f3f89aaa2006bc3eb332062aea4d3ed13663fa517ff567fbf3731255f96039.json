{"ast":null,"code":"import { defineStore } from 'pinia';\nimport api from '@/utils/api';\nexport const useAuthStore = defineStore('auth', {\n  state: () => ({\n    user: null,\n    token: localStorage.getItem('token') || null,\n    role: localStorage.getItem('role') || null,\n    permissions: []\n  }),\n  getters: {\n    isAuthenticated: state => !!state.token,\n    isAdmin: state => state.role === 'admin',\n    isTechnician: state => state.role === 'technician',\n    isBreeder: state => state.role === 'breeder',\n    userPermissions: state => state.permissions\n  },\n  actions: {\n    async login(credentials) {\n      try {\n        // 实际项目中，这里应该调用后端API进行认证\n        const response = await api.post('/auth/login', credentials);\n        if (response.data.token) {\n          this.setAuthData(response.data);\n          return {\n            success: true\n          };\n        }\n        return {\n          success: false,\n          message: '登录失败，请检查用户名和密码'\n        };\n      } catch (error) {\n        console.error('登录错误:', error);\n        return {\n          success: false,\n          message: error.response?.data?.message || '登录时发生错误，请稍后再试'\n        };\n      }\n    },\n    async fetchUserPermissions() {\n      try {\n        if (!this.token) return;\n        const response = await api.get('/auth/permissions', {\n          headers: {\n            Authorization: `Bearer ${this.token}`\n          }\n        });\n        this.permissions = response.data.permissions;\n      } catch (error) {\n        console.error('获取权限错误:', error);\n      }\n    },\n    setAuthData(data) {\n      this.token = data.token;\n      this.user = data.user;\n      this.role = data.role;\n\n      // 保存到本地存储\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('role', data.role);\n\n      // 设置axios默认头部\n      api.defaults.headers.common['Authorization'] = `Bearer ${data.token}`;\n\n      // 获取用户权限\n      this.fetchUserPermissions();\n    },\n    logout() {\n      this.user = null;\n      this.token = null;\n      this.role = null;\n      this.permissions = [];\n\n      // 清除本地存储\n      localStorage.removeItem('token');\n      localStorage.removeItem('role');\n\n      // 清除axios默认头部\n      delete api.defaults.headers.common['Authorization'];\n    }\n  }\n});","map":{"version":3,"names":["defineStore","api","useAuthStore","state","user","token","localStorage","getItem","role","permissions","getters","isAuthenticated","isAdmin","isTechnician","isBreeder","userPermissions","actions","login","credentials","response","post","data","setAuthData","success","message","error","console","fetchUserPermissions","get","headers","Authorization","setItem","defaults","common","logout","removeItem"],"sources":["C:/Users/Scott/Downloads/毕设/frontend/src/store/auth.js"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport api from '@/utils/api'\r\n\r\nexport const useAuthStore = defineStore('auth', {\r\n  state: () => ({\r\n    user: null,\r\n    token: localStorage.getItem('token') || null,\r\n    role: localStorage.getItem('role') || null,\r\n    permissions: []\r\n  }),\r\n  \r\n  getters: {\r\n    isAuthenticated: (state) => !!state.token,\r\n    isAdmin: (state) => state.role === 'admin',\r\n    isTechnician: (state) => state.role === 'technician',\r\n    isBreeder: (state) => state.role === 'breeder',\r\n    userPermissions: (state) => state.permissions\r\n  },\r\n  \r\n  actions: {\r\n    async login(credentials) {\r\n      try {\r\n        // 实际项目中，这里应该调用后端API进行认证\r\n        const response = await api.post('/auth/login', credentials)\r\n        \r\n        if (response.data.token) {\r\n          this.setAuthData(response.data)\r\n          return { success: true }\r\n        }\r\n        \r\n        return { success: false, message: '登录失败，请检查用户名和密码' }\r\n      } catch (error) {\r\n        console.error('登录错误:', error)\r\n        return { \r\n          success: false, \r\n          message: error.response?.data?.message || '登录时发生错误，请稍后再试' \r\n        }\r\n      }\r\n    },\r\n    \r\n    async fetchUserPermissions() {\r\n      try {\r\n        if (!this.token) return\r\n        \r\n        const response = await api.get('/auth/permissions', {\r\n          headers: { Authorization: `Bearer ${this.token}` }\r\n        })\r\n        \r\n        this.permissions = response.data.permissions\r\n      } catch (error) {\r\n        console.error('获取权限错误:', error)\r\n      }\r\n    },\r\n    \r\n    setAuthData(data) {\r\n      this.token = data.token\r\n      this.user = data.user\r\n      this.role = data.role\r\n      \r\n      // 保存到本地存储\r\n      localStorage.setItem('token', data.token)\r\n      localStorage.setItem('role', data.role)\r\n      \r\n      // 设置axios默认头部\r\n      api.defaults.headers.common['Authorization'] = `Bearer ${data.token}`\r\n      \r\n      // 获取用户权限\r\n      this.fetchUserPermissions()\r\n    },\r\n    \r\n    logout() {\r\n      this.user = null\r\n      this.token = null\r\n      this.role = null\r\n      this.permissions = []\r\n      \r\n      // 清除本地存储\r\n      localStorage.removeItem('token')\r\n      localStorage.removeItem('role')\r\n      \r\n      // 清除axios默认头部\r\n      delete api.defaults.headers.common['Authorization']\r\n    }\r\n  }\r\n})\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}