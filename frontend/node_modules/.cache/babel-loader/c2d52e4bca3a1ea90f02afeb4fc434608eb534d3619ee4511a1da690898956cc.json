{"ast":null,"code":"import axios from 'axios';\nimport { useAuthStore } from '../store/auth';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: '/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  const authStore = useAuthStore();\n  // 如果有token，则添加到请求头\n  if (authStore.token) {\n    config.headers['Authorization'] = `Bearer ${authStore.token}`;\n  }\n  return config;\n}, error => {\n  console.error('请求错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => {\n  return response.data;\n}, error => {\n  const authStore = useAuthStore();\n\n  // 如果是401错误，则清除token并跳转到登录页\n  if (error.response && error.response.status === 401) {\n    authStore.logout();\n    window.location.href = '/login';\n  }\n  console.error('响应错误:', error);\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","useAuthStore","api","create","baseURL","timeout","headers","interceptors","request","use","config","authStore","token","error","console","Promise","reject","response","data","status","logout","window","location","href"],"sources":["C:/Users/Scott/Downloads/毕设/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { useAuthStore } from '../store/auth';\r\n\r\n// 创建axios实例\r\nconst api = axios.create({\r\n  baseURL: '/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  }\r\n});\r\n\r\n// 请求拦截器\r\napi.interceptors.request.use(\r\n  config => {\r\n    const authStore = useAuthStore();\r\n    // 如果有token，则添加到请求头\r\n    if (authStore.token) {\r\n      config.headers['Authorization'] = `Bearer ${authStore.token}`;\r\n    }\r\n    return config;\r\n  },\r\n  error => {\r\n    console.error('请求错误:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器\r\napi.interceptors.response.use(\r\n  response => {\r\n    return response.data;\r\n  },\r\n  error => {\r\n    const authStore = useAuthStore();\r\n    \r\n    // 如果是401错误，则清除token并跳转到登录页\r\n    if (error.response && error.response.status === 401) {\r\n      authStore.logout();\r\n      window.location.href = '/login';\r\n    }\r\n    \r\n    console.error('响应错误:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,eAAe;;AAE5C;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAE,MAAM;EACfC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAC1BC,MAAM,IAAI;EACR,MAAMC,SAAS,GAAGV,YAAY,CAAC,CAAC;EAChC;EACA,IAAIU,SAAS,CAACC,KAAK,EAAE;IACnBF,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,SAAS,CAACC,KAAK,EAAE;EAC/D;EACA,OAAOF,MAAM;AACf,CAAC,EACDG,KAAK,IAAI;EACPC,OAAO,CAACD,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;EAC7B,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAX,GAAG,CAACK,YAAY,CAACU,QAAQ,CAACR,GAAG,CAC3BQ,QAAQ,IAAI;EACV,OAAOA,QAAQ,CAACC,IAAI;AACtB,CAAC,EACDL,KAAK,IAAI;EACP,MAAMF,SAAS,GAAGV,YAAY,CAAC,CAAC;;EAEhC;EACA,IAAIY,KAAK,CAACI,QAAQ,IAAIJ,KAAK,CAACI,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;IACnDR,SAAS,CAACS,MAAM,CAAC,CAAC;IAClBC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EAEAT,OAAO,CAACD,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;EAC7B,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeX,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}