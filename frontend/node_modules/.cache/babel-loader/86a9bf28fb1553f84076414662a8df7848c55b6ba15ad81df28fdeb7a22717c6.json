{"ast":null,"code":"import axios from 'axios';\nimport { useAuthStore } from '../store/auth';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: '/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  const authStore = useAuthStore();\n  // 如果有token，则添加到请求头\n  if (authStore.token) {\n    config.headers['Authorization'] = `Bearer ${authStore.token}`;\n  }\n  return config;\n}, error => {\n  console.error('请求错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => {\n  // 直接返回响应数据\n  return response;\n}, error => {\n  const authStore = useAuthStore();\n  if (error.response) {\n    // 如果是401错误，则清除token并跳转到登录页\n    if (error.response.status === 401) {\n      authStore.logout();\n      window.location.href = '/login';\n    }\n\n    // 处理422验证错误\n    if (error.response.status === 422) {\n      const validationErrors = error.response.data.detail || [];\n      let errorMessage = '输入信息有误：\\n';\n      if (Array.isArray(validationErrors)) {\n        validationErrors.forEach(err => {\n          errorMessage += `${err.loc[1]}: ${err.msg}\\n`;\n        });\n      } else {\n        errorMessage = error.response.data.detail || '请检查输入信息';\n      }\n      error.message = errorMessage;\n    }\n  }\n  console.error('响应错误:', error);\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","useAuthStore","api","create","baseURL","timeout","headers","interceptors","request","use","config","authStore","token","error","console","Promise","reject","response","status","logout","window","location","href","validationErrors","data","detail","errorMessage","Array","isArray","forEach","err","loc","msg","message"],"sources":["C:/Users/Scott/Downloads/毕设/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { useAuthStore } from '../store/auth';\r\n\r\n// 创建axios实例\r\nconst api = axios.create({\r\n  baseURL: '/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  }\r\n});\r\n\r\n// 请求拦截器\r\napi.interceptors.request.use(\r\n  config => {\r\n    const authStore = useAuthStore();\r\n    // 如果有token，则添加到请求头\r\n    if (authStore.token) {\r\n      config.headers['Authorization'] = `Bearer ${authStore.token}`;\r\n    }\r\n    return config;\r\n  },\r\n  error => {\r\n    console.error('请求错误:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器\r\napi.interceptors.response.use(\r\n  response => {\r\n    // 直接返回响应数据\r\n    return response;\r\n  },\r\n  error => {\r\n    const authStore = useAuthStore();\r\n    \r\n    if (error.response) {\r\n      // 如果是401错误，则清除token并跳转到登录页\r\n      if (error.response.status === 401) {\r\n        authStore.logout();\r\n        window.location.href = '/login';\r\n      }\r\n      \r\n      // 处理422验证错误\r\n      if (error.response.status === 422) {\r\n        const validationErrors = error.response.data.detail || [];\r\n        let errorMessage = '输入信息有误：\\n';\r\n        \r\n        if (Array.isArray(validationErrors)) {\r\n          validationErrors.forEach(err => {\r\n            errorMessage += `${err.loc[1]}: ${err.msg}\\n`;\r\n          });\r\n        } else {\r\n          errorMessage = error.response.data.detail || '请检查输入信息';\r\n        }\r\n        \r\n        error.message = errorMessage;\r\n      }\r\n    }\r\n    \r\n    console.error('响应错误:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,eAAe;;AAE5C;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAE,MAAM;EACfC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAC1BC,MAAM,IAAI;EACR,MAAMC,SAAS,GAAGV,YAAY,CAAC,CAAC;EAChC;EACA,IAAIU,SAAS,CAACC,KAAK,EAAE;IACnBF,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,SAAS,CAACC,KAAK,EAAE;EAC/D;EACA,OAAOF,MAAM;AACf,CAAC,EACDG,KAAK,IAAI;EACPC,OAAO,CAACD,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;EAC7B,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAX,GAAG,CAACK,YAAY,CAACU,QAAQ,CAACR,GAAG,CAC3BQ,QAAQ,IAAI;EACV;EACA,OAAOA,QAAQ;AACjB,CAAC,EACDJ,KAAK,IAAI;EACP,MAAMF,SAAS,GAAGV,YAAY,CAAC,CAAC;EAEhC,IAAIY,KAAK,CAACI,QAAQ,EAAE;IAClB;IACA,IAAIJ,KAAK,CAACI,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MACjCP,SAAS,CAACQ,MAAM,CAAC,CAAC;MAClBC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IACjC;;IAEA;IACA,IAAIT,KAAK,CAACI,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MACjC,MAAMK,gBAAgB,GAAGV,KAAK,CAACI,QAAQ,CAACO,IAAI,CAACC,MAAM,IAAI,EAAE;MACzD,IAAIC,YAAY,GAAG,WAAW;MAE9B,IAAIC,KAAK,CAACC,OAAO,CAACL,gBAAgB,CAAC,EAAE;QACnCA,gBAAgB,CAACM,OAAO,CAACC,GAAG,IAAI;UAC9BJ,YAAY,IAAI,GAAGI,GAAG,CAACC,GAAG,CAAC,CAAC,CAAC,KAAKD,GAAG,CAACE,GAAG,IAAI;QAC/C,CAAC,CAAC;MACJ,CAAC,MAAM;QACLN,YAAY,GAAGb,KAAK,CAACI,QAAQ,CAACO,IAAI,CAACC,MAAM,IAAI,SAAS;MACxD;MAEAZ,KAAK,CAACoB,OAAO,GAAGP,YAAY;IAC9B;EACF;EAEAZ,OAAO,CAACD,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;EAC7B,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeX,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}